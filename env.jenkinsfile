pipeline {

  environment {

    PROJECT = 'YOUR-PROJECT'
    K8S_ENVIRONMENT_CREDENTIAL = 'YOUR-PROJECT-ENVIRONMENT-kubeconfig'
    K8S_YAML_PATH_ENVIRONMENT = 'k8s/ENVIRONMENT/back-end-ENVIRONMENT-deploy.yml'
    K8S_NAMESPACE = 'YOUR-PROJECT-'
    REGISTER = 'harbor.YOUR-PROJECT.interno'
    REGISTER_CREDENTIAL = 'YOUR-PROJECT-harbor-registry'
    DOCKER_FILE = 'Dockerfile'
    DOCKER_IMAGE_NAME = 'back-end'
    TAG_ENVIRONMENT = "ENVIRONMENT-"
    BRANCH_NAME = "YOUR-BRANCH"
  }

  agent {
    label 'jenkins-jenkins-agent'
  }

  stages {
    
    stage ('Cloning from Bitbucket') {
      steps {
        checkout scm
      }
    }

    stage("[ENVIRONMENT] - Build") {
      steps {
        script {
          sh 'docker --version'
          def timestamp = (new Date()).format("yyyy-MM-dd_HH-mm-ss", TimeZone.getTimeZone('UTC'))
          env.IMG_NAME = PROJECT + "/${DOCKER_IMAGE_NAME}:${TAG_ENVIRONMENT}${timestamp}"
          env.IMAGE = "${REGISTER}/${env.IMG_NAME}"
                    
          docker.withRegistry("http://${REGISTER}", "${REGISTER_CREDENTIAL}") {
            DOCKER_IMAGE = docker.build(env.IMG_NAME, " . -f ./YOUR-PROJECT./${DOCKER_FILE}")
          }
        }
      }
    }

    stage("[ENVIRONMENT] - Push") {
      steps{
        script{
          docker.withRegistry("http://${REGISTER}", "${REGISTER_CREDENTIAL}") {
            DOCKER_IMAGE.push()
          }
        }
      }
    }

    stage("[ENVIRONMENT] - Deploy") {
      steps{
        script {
          env.IMAGE = IMAGE
          kubernetesDeploy(kubeconfigId: "${K8S_ENVIRONMENT_CREDENTIAL}", configs: "${K8S_YAML_PATH_ENVIRONMENT}", enableConfigSubstitution: true)
        }
      }
    } 

    stage('[ALL] REMOVE LOCAL IMAGE') {
      steps {
        script {
          sh("docker rmi -f ${env.IMG_NAME} || :")
        }
      }
    }
  }
}
